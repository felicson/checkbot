// Code generated by go-bindata.
// sources:
// http.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _httpGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x7b\x6f\xdb\xba\x15\xff\xdb\xfe\x14\xac\x80\x8b\x2b\xf5\x2a\x92\x93\x7b\xb7\x62\x59\x73\x81\x35\x6b\x97\x62\x69\x1b\x34\xc1\xfa\x47\x16\x04\xb4\x4c\xd9\x44\x64\x52\x23\xa9\x3c\x90\xeb\xef\xbe\x73\x0e\xa9\x87\xed\xb8\x6b\x02\xac\x40\x1d\x89\x3c\xef\xc7\x8f\x87\xaa\x79\x71\xc3\xe7\x82\x2d\xb9\x54\xe3\x71\x9e\xcf\xf5\xe1\x5c\x28\x61\xb8\x13\x6c\xae\xf7\xa6\x52\xcd\xb8\xe3\x6c\x4f\xe9\x42\x2f\x6b\x23\xac\x65\x4e\x2c\xeb\x0a\xf6\x6d\x9e\x65\x19\xe3\xd6\x0a\x67\xf3\xb1\x5c\xd6\xda\x38\x16\x8f\x47\xd1\xb4\x29\xa5\x8e\xe0\xa1\x5c\x3a\xfc\x33\x97\x6e\xd1\x4c\x33\x10\x90\x2f\xb9\x71\x52\xe9\xca\x0a\x05\xaa\xf6\xee\x16\x5a\x5a\x24\x59\xb8\x65\x95\xb7\x82\x71\x41\x09\x17\xfe\xe4\x0b\xe7\x6a\x7c\xd6\x44\x59\x73\xb7\xc8\x4b\x59\x09\x7c\xc0\x05\xeb\x8c\x54\x73\xda\xb3\x0f\xaa\x88\xc6\xc9\x78\x7c\xcb\x0d\x5a\xe2\x40\x1e\xc3\x7f\xaf\x5b\xd1\xd9\x45\x78\xf0\x9b\xd7\xc2\x18\x06\xff\xb5\x81\x77\x16\xfe\x2d\x79\x7d\xe9\x85\x5e\x3d\xc1\x37\x1e\xf1\x5a\xeb\x8a\xa1\xae\xec\x0c\x9e\x50\x5f\xd9\xa8\x82\x19\xa1\x66\xc2\xb4\x84\xf1\x1d\x43\xc3\xb3\xaf\xc2\xd6\x5a\x59\xf1\xcd\x48\x27\x4c\xca\x14\x5f\x0a\xe6\xc5\xa7\x8c\x62\x2b\x15\x6c\x94\xbc\x10\x8f\xab\xc4\x1b\xc3\x1e\x41\x8d\xab\xab\x94\xe9\x1b\x76\x78\xc4\xdc\x25\x72\x5d\xc1\xa2\x2c\xd9\x2b\x58\x7b\x1c\x8f\x46\x46\xb8\xc6\x28\x06\x31\xce\xde\x23\x53\x19\x47\x17\x0b\xd1\x65\x87\xfd\x64\xd9\x4c\x0b\xcb\x94\x76\x4c\xdc\x4b\xeb\x5e\x45\x5e\x7b\x32\x1e\xad\x40\x54\xe0\x07\x35\xd9\xfb\x7b\x51\x34\x4e\xf4\xa6\xa7\x2c\x9a\x72\x2b\x22\x6f\x61\x32\x5e\x05\x17\x63\xeb\xb4\xc1\x72\x79\xfd\x11\xf4\xd8\x84\x7d\x54\xa5\x3e\xe1\x6a\x56\x09\xb3\xcb\x61\xc3\x5e\x87\xf5\xff\x34\xc2\xba\x84\x9c\xc3\x04\xd5\x21\x0c\xde\xad\x9a\x1d\x31\x93\x7d\xd0\x66\xf9\x2f\x5e\x35\x22\x8e\xea\x28\xf9\x2b\xae\x1e\xb1\x28\x22\x87\x91\x22\x9a\x44\xde\x7a\x14\x30\x7d\x38\xc7\x92\x7b\xf7\x00\xef\xe1\xf9\x88\xa1\x9d\xb1\xdc\x4f\x99\x3c\xf0\x56\x26\x6c\x8a\xf9\x7a\x64\xc1\x61\xb9\x9f\x9d\x48\x67\xd9\xef\x40\xe1\x9f\x56\xc4\x8f\x81\x5e\x33\xc0\x82\xc0\x08\x92\x3b\xb2\x77\xd2\x15\x0b\x50\x47\xa6\x17\x10\x18\x08\xcf\x03\x34\x40\x74\x08\x66\x3d\x4b\xf3\x3b\x64\xf3\xaa\xfd\xe3\xaa\x93\x78\xcb\x2b\x39\x7b\xbe\xc4\x6f\x0b\x08\xf3\xf5\xa2\xf3\x68\xf0\x8e\xb2\x57\x50\xaf\xc6\x70\xf2\x8e\x0a\x37\xfb\x87\x70\x71\x92\xc5\x97\x57\x5e\x22\xb8\xe7\x73\x7a\x2a\x14\x12\x55\x42\xb5\x59\xce\x8c\xbe\x4b\x7c\x76\x70\x95\xe4\x24\xec\x2d\x1b\x30\x60\x5e\xbc\xfc\x23\xe8\x9b\x1b\xd1\x8a\x4d\x07\x44\xa1\xde\x66\xa2\x14\x26\xd8\x70\xd6\xb8\x20\x0e\xa4\xa3\xd6\xc9\x78\x54\x42\xdd\x5f\xa7\xec\x96\xf2\xc0\xd5\x5c\xb0\x81\x19\xbd\xa2\x4b\x79\x05\xba\x6e\xe1\x55\xfe\xf2\x0b\xf9\x47\x4d\x04\x4c\xef\x1e\x62\x1f\xb9\x24\xc3\xdf\x4e\xc1\x54\x3b\x9b\x62\x63\x21\x11\x12\x67\x5f\xca\x12\x40\x2b\xae\x83\x73\xb8\xf5\xea\x88\x29\x59\x91\x1a\xaa\x56\x6a\x29\x6c\x04\xd8\x0c\x2f\x49\xca\xfe\x34\x99\x24\x5d\xeb\x91\xf2\xcd\xa6\x87\xce\x01\xc8\x14\xf7\xd0\x3a\xa8\x17\x34\xec\xec\x9d\x29\x57\x2f\x69\x9d\xe0\x88\xc9\xce\xb8\xb1\x02\xeb\x35\x7e\xda\x8f\xbb\x8c\xe4\x40\x4a\xb0\x58\xe3\xe8\x9b\xd1\x6a\x0e\x68\x53\x37\x8e\xc2\x10\x25\xeb\xbe\x80\x8c\x7a\xab\x09\x64\x4d\x2d\xc0\x0b\x27\xb5\xda\xda\xf5\xcb\x44\x81\x0d\xe9\x5f\x69\xaf\xed\x6d\x5a\x07\x2b\x3c\x07\x95\x6f\xdf\x51\x41\xea\xa0\xab\xb8\x82\x0e\xc0\x54\x0f\x24\x41\xd7\xf3\xd9\x2c\xc2\x8c\x77\x72\x00\x13\x4d\x23\x3a\xbe\x46\xed\xe2\x9c\x89\x6a\x93\xb3\xe4\x70\xfc\xf8\x82\xe4\x4d\xe5\x0e\x5f\x16\xaa\x92\xbc\x6a\x11\xba\x2d\x55\x6c\x2e\x59\x03\x70\x11\x48\x07\xc5\xd9\x3b\xae\x94\x98\x81\xea\xce\x0c\xd8\x11\x00\xba\xc7\x7a\xb9\x84\x12\x88\x11\xc4\xcf\x6b\x08\x98\x03\x14\xb7\xcd\x4c\xb3\xdc\xc2\xd1\x9b\xcb\x1a\xea\x14\x91\x7c\x5a\xc1\x39\x5d\x01\x88\xc3\x0b\x94\xd6\xc0\x49\x00\x87\x9a\xac\x0b\x95\x32\x93\x46\x14\x0e\x0b\x11\x0a\x28\xca\x25\x00\x74\x0e\x1c\xbf\x4e\x0e\x06\x2e\x50\xe9\xfe\x88\xd3\x5d\xf5\x7e\x80\xaa\x7e\x31\xd0\x73\x07\x04\x6a\x1d\xee\xc3\xda\x46\x41\x95\xa0\x86\x70\xbf\xdd\xee\xd0\x7f\xbd\x2b\xa3\xb3\x40\x80\xa7\x1b\xc4\x28\x7a\xa2\x37\xc7\xa3\x25\x87\x2a\x03\x90\x3d\x0c\xe0\x34\x38\xd9\x2f\xaf\xfc\x03\x96\x6e\x40\x9e\x4a\xcf\x7b\xec\x39\xd5\x73\xeb\x33\x88\xb3\x46\x07\x1f\xda\x66\x5f\x6a\xc0\x42\xa0\xcd\x70\x00\x41\xf6\x80\x6c\x48\x97\x1d\x57\xda\x0a\xea\xc7\x27\x1a\x72\xd3\x07\x7a\x62\x1a\xe4\xa1\x6e\xe4\xef\xdd\xe8\xfc\xc0\x4c\x8d\x6c\xc1\xa9\xf9\x68\xb2\xca\x3e\x8b\xbb\xf3\x02\x4b\xca\xc4\xc8\x44\xda\x30\xce\x30\xd1\xb0\xd6\x2f\x34\x1c\x84\x23\x63\x86\xc4\x71\xe2\x4d\xa8\xa4\x12\x54\xb0\xb8\x71\x21\xee\xe1\x2c\xc0\x65\x30\x36\xcc\x51\xd9\xb1\x56\x0e\x86\x41\x1b\x23\x69\xda\x66\x22\xb0\xe3\xd4\xc4\xf0\x24\x01\xa3\x67\x31\xbc\x40\xd8\x80\x8c\x64\xac\x82\xb1\x21\xea\x97\x6d\x8c\x10\xaf\x81\x72\x0d\xab\x41\x59\x53\x38\x92\x79\xb6\x5e\x1d\xa3\xd1\xa7\x90\xb5\x27\xb2\x05\x32\x68\x12\xf0\x2c\x29\x0b\xaa\xd2\x9d\x50\x5c\x63\xfd\x6f\x8d\x31\xdf\x70\xec\x7c\x69\x35\xcb\xf5\xb9\x45\x6e\x0d\x2e\x92\x26\x17\x39\x1c\x5d\x36\x5b\xed\xb3\xaf\xda\x36\xb8\x9b\xf0\x32\xa2\xb9\xb8\x2b\x3a\x7a\xcb\x4e\xb5\xbe\x69\x6a\x44\x97\x97\x9d\x5a\x74\x06\x6f\x87\xff\xe3\x19\xce\xbc\x5d\xf0\x29\x34\xac\x8f\xb6\xac\xd3\xf0\x16\x7b\x33\xfe\x8e\x91\xf4\xf3\xe3\x56\xb8\xfd\x38\xdf\x46\x1b\xc2\x4d\xd1\xa6\x1b\x42\x1b\x6d\xf3\x9c\x70\x17\xb6\x0f\xc2\xdf\x50\x0a\x9c\x38\xfe\xba\x01\x05\x98\xc1\x6e\xf4\x3f\x63\x61\xc8\x2e\x42\x36\xa4\xef\x83\x31\x32\x77\xd9\x89\xe0\xe0\x02\x4c\x43\xe7\x28\x1a\x0b\x5f\x28\xb7\xe7\x1e\x6a\x6c\xc4\xc8\x41\x77\xe4\x5e\x09\x12\xfb\x0c\xc2\x7b\x5f\x47\x52\x49\x17\x7b\x53\x4b\xa8\x56\x8f\x33\x5d\xd1\x0e\xe6\x7a\x02\x92\x68\x39\x9f\x46\x87\x7e\xa8\xa3\xf1\x91\x35\x40\xf2\xe7\xdf\x92\x10\x60\x0f\x37\xc3\xb9\xbe\x3b\x12\x7e\xca\x7e\x2d\xd9\xa7\x29\x58\x55\x56\x9a\x03\x8f\x17\x90\xe4\xf1\xfe\xe4\xe0\xb7\xd7\xf8\x43\x25\xb4\x4a\x51\x8f\xaa\x0e\xa6\xa6\xd5\x04\xb2\x83\xfc\xa4\xbb\x1b\x64\x27\x17\x9f\x4e\xd7\xd5\xad\x6d\xc5\x2d\x16\x7c\x15\xb0\x58\x08\x7c\x87\x80\xfc\x5b\x61\x58\xde\x4e\x0d\xcb\x7f\x87\xa7\xbd\xfd\x4e\x27\xd6\x43\x77\x2d\xec\xb2\xf5\x19\x2e\x1b\x96\xc0\xd0\xb1\x6d\x04\xde\xbe\x5b\xa5\x34\x66\x76\x72\x92\x76\xac\x70\xd3\xa7\x2e\x70\x1d\x6e\xc3\x0d\xa6\xc7\xed\xde\x8a\xc7\x00\xc2\xad\x2f\x27\xdc\x9e\x19\x51\xca\xfb\x98\x6e\x56\x51\x7f\x8d\x95\xaa\xa8\x9a\x19\x8c\xf3\x49\x88\x09\x24\x5e\xd3\x88\x18\x7a\x85\xf8\x4f\xb9\x75\x1f\x71\xb4\xc3\xc1\xdd\xcb\xf8\x39\xfb\x99\xc0\x97\xfa\x6a\xa3\x52\x81\xa0\x45\xd6\xcd\x63\x00\xf0\x4b\xc9\x22\x86\xe5\x0e\x37\x47\x74\x2d\x04\xe6\xf6\x66\x0b\x33\x83\x25\x2d\x97\x87\x9d\x35\x57\xad\x40\x08\xc8\xd1\x50\x1e\xbe\xf7\x19\x84\xe3\x21\x0e\xf7\x3c\x10\xce\x04\x4c\x3b\x8c\x98\x32\x4c\x08\xd4\x2b\xf2\xa2\x3a\xcf\x5c\x40\xd9\x4b\x45\x23\x49\x4b\x3d\x94\x3a\xdd\x90\x87\x3f\xd7\xde\x57\xda\xa5\x29\x34\x14\x4c\x4c\x8d\xef\x43\xf2\x23\x7e\xfb\x03\x63\xf5\xff\x49\xe5\x1f\x7f\xec\xa4\xf7\x20\x12\x85\x33\x6d\x10\x00\x32\x69\x57\x32\x9f\x3e\xd3\xd7\x7c\x5a\x8d\x9f\x5f\x3c\x3f\x98\xf9\x31\x26\xe4\x20\x65\xd7\xf4\x41\x60\x8a\x93\x86\x0a\x93\x06\xac\xf7\x49\xca\x3e\x40\xd7\xdb\x18\xf1\x88\x36\x07\xb9\x3a\xd8\x95\xac\x1f\x71\x2b\x7c\x83\xf0\x82\x7c\xd2\xfc\x87\x90\xa3\xfe\x53\x08\x72\x82\x21\x01\x79\x92\xe1\x97\x8d\xfe\xce\xba\x7e\x4d\xdc\x9f\x24\xcc\x23\x48\x0b\xaa\x5f\x1b\xb5\x75\x55\x6a\xcf\xde\xc1\xe7\x1a\xc8\x1a\x4c\xc3\xe7\x5f\x8e\xff\xf9\xfe\x02\x07\xfd\x1c\x46\x8c\x1c\x86\x81\xe2\x06\xee\x5d\x99\xd5\xc5\x4d\xe4\xcf\x86\x2e\x00\x30\xbb\x9d\x3b\xee\x62\xcf\x03\x47\x34\x2d\xb7\x3e\x83\xe9\x30\xb0\x14\x0b\x18\xb4\xde\xee\xb1\xe8\xab\x58\xea\x5b\xc1\x74\x35\x63\x28\x0b\xb2\x49\xf3\x19\x50\x69\x84\x45\xdc\x6c\x05\xf9\x60\xe0\x70\x8e\x1f\xce\xba\xca\x51\xc2\x65\xa7\xb4\x18\xc3\xfd\x44\xe2\x8d\xb0\x63\xc8\xf3\xef\x92\xbb\xa2\x46\xa4\x3d\xfc\xcb\x64\x32\xd9\x71\xc4\x0d\xf3\xb3\x0a\xb7\x42\x72\xf1\x78\xb1\xd4\xb3\x60\x5a\xca\x26\x6f\xde\xbc\x79\x5a\x40\x6b\x40\x37\xb2\x6e\xcb\xa4\x63\xd4\x1f\xdc\x58\x54\x71\x7f\x9b\x68\xaf\x3b\x83\xcf\x3f\xc9\x4e\x7a\x89\xce\x0c\xee\x0f\xdf\xa3\xcc\xf1\x1e\xd7\xcb\xef\xaf\xc8\xbb\x99\xda\xa1\x63\x38\xd4\xed\xa6\xde\x98\x1f\xd2\xb5\xe9\x84\x2e\x03\x70\xee\x9e\xe1\xb1\x5b\xa9\x98\x64\x9c\x0b\x03\xb9\xee\xf3\x05\x01\x4c\x70\x04\xf8\x6f\x00\x00\x00\xff\xff\xf2\x82\x2c\x9a\x3a\x15\x00\x00")

func httpGoBytes() ([]byte, error) {
	return bindataRead(
		_httpGo,
		"http.go",
	)
}

func httpGo() (*asset, error) {
	bytes, err := httpGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http.go", size: 5434, mode: os.FileMode(420), modTime: time.Unix(1489243851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"http.go": httpGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"http.go": &bintree{httpGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

